# Define stages in the pipeline
stages:
    - build
    - test
    - scan
    - build_image
    - deploy_stage
    - deploy_prod

# Variables for Docker registry and Snyk settings
variables:
    DOCKER_IMAGE: "cloud-design-gateway-app" # Tag Docker image with branch name
    DOCKERHUB_USERNAME: "$DOCKER_U"   # Docker Hub username stored in GitLab CI/CD settings
    DOCKERHUB_PASSWORD: "$DOCKER_P"   # Docker Hub password stored in GitLab CI/CD settings

# Build stage: Installs dependencies
build:
    stage: build
    image: node:alpine3.17
    script:
        - echo "Installing dependencies..."
        - npm install
    artifacts:
        paths:
            - node_modules/                     # Caches dependencies

# Test stage: Runs unit and integration tests
test:
    stage: test
    script:
        - echo "Running tests..."
        - echo "Tests done"

# Scan stage: Uses Snyk to check for vulnerabilities in code and Docker image
scan:
    stage: scan
    image: node:latest
    script:
        # Install npm, snyk, and snyk-to-html
        - echo "$AWS_REGION"
        - npm install -g npm@latest
        - npm install -g snyk
        - npm install snyk-to-html -g
        # Run snyk help, snyk auth, snyk monitor, snyk test to break build and out report
        - snyk --help
        - snyk auth $SNYK_TOKEN
        - snyk test
    allow_failure: true    
    
# Containerization stage: Builds Docker image for the application
build_image:
    stage: build_image
    script:
        - docker -v
        - echo "Logging into Docker Hub..."
        - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
        - echo "Building Docker image $DOCKERHUB_USERNAME/$DOCKER_IMAGE:$CI_COMMIT_SHA"
        - docker build -t $DOCKERHUB_USERNAME/$DOCKER_IMAGE:$CI_COMMIT_SHA .
        - echo "Pushing Docker image to Docker Hub..."
        - docker push "$DOCKERHUB_USERNAME/$DOCKER_IMAGE:$CI_COMMIT_SHA"
        - echo "Tagging Docker image to latest..."        
        - docker tag $DOCKERHUB_USERNAME/$DOCKER_IMAGE:$CI_COMMIT_SHA $DOCKERHUB_USERNAME/$DOCKER_IMAGE:latest
        - docker push $DOCKERHUB_USERNAME/$DOCKER_IMAGE:latest

#GIBIDI generation
deploy_to_eks_stage:
    stage: deploy_stage
    image: python:3.9-alpine  # Switch to an Alpine image with Python and pip support
    before_script:
        # Update packages and install dependencies
        - apk update && apk add --no-cache curl bash gcc libc-dev python3-dev libffi-dev openssl-dev

        # Install AWS CLI via pip
        - pip install --upgrade pip
        - pip install awscli
        - aws --version  # Verify AWS CLI installation

        # Install kubectl
        - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        - chmod +x kubectl
        - mv kubectl /usr/local/bin/
        - kubectl version --client  # Verify kubectl installation
    script:
        - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
        - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
        - aws configure set region $AWS_REGION
        - aws eks update-kubeconfig --name staging-main-cluster --region $AWS_REGION
        - kubectl rollout restart deployment api-gateway-app
    when: manual

deploy_to_eks_prod:
    stage: deploy_prod
    image: python:3.9-alpine  # Switch to an Alpine image with Python and pip support
    before_script:
        # Update packages and install dependencies
        - apk update && apk add --no-cache curl bash gcc libc-dev python3-dev libffi-dev openssl-dev

        # Install AWS CLI via pip
        - pip install --upgrade pip
        - pip install awscli
        - aws --version  # Verify AWS CLI installation

        # Install kubectl
        - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        - chmod +x kubectl
        - mv kubectl /usr/local/bin/
        - kubectl version --client  # Verify kubectl installation
    script:
        - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
        - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
        - aws configure set region $AWS_REGION
        - aws eks update-kubeconfig --name prod-main-cluster --region $AWS_REGION
        - kubectl rollout restart deployment api-gateway-app
    when: manual